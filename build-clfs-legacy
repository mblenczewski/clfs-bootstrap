#!/bin/sh


################################################################################
### I) Preparation for the build ###############################################
################################################################################
export CLFS=/mnt/clfs
export CLFS_BUILD=${CLFS}/build
export CLFS_CONFIGS=${CLFS}/configs
export CLFS_LOGS=${CLFS}/logs
export CLFS_SCRIPTS=${CLFS}/scripts
export CLFS_SOURCES=${CLFS}/sources
export CLFS_ROOT=${CLFS}/rootfs
export CLFS_SYSROOT=${CLFS_ROOT}
export CLFS_BOOT_ROOT=${CLFS}/bootfs
export CLFS_CROSS_ROOT=${CLFS}/crossfs
export CLFS_CROSS_SYSROOT=${CLFS_CROSS_ROOT}  #### this assignment is temporary


mkdir -pv ${CLFS}
rm -rf ${CLFS_BUILD} ${CLFS_ROOT} ${CLFS_BOOT_ROOT} ${CLFS_CROSS_ROOT}
chmod 777 ${CLFS}

mkdir -pv ${CLFS_BUILD} ${CLFS_CONFIGS} ${CLFS_LOGS} ${CLFS_SCRIPTS} ${CLFS_SOURCES}
chmod -v a+wt ${CLFS_BUILD} ${CLFS_CONFIGS} ${CLFS_LOGS} ${CLFS_SCRIPTS} ${CLFS_SOURCES}


fetch_packages () {
    rm -rf ${CLFS_SOURCES}/{md5sums,wget-list}

    tr -d '\r' < wget-list.src > ${CLFS_SOURCES}/wget-list
    tr -d '\r' < md5sums.src > ${CLFS_SOURCES}/md5sums

    pushd ${CLFS_SOURCES} > /dev/null
	wget --input-file=wget-list --continue
	md5sum -c md5sums
    popd > /dev/null
}

fetch_packages


## Copying over scripts and additional config files
rm -rf ${CLFS_CONFIGS}/* ${CLFS_SCRIPTS}/*
cp -rf configs/* ${CLFS_CONFIGS}
cp -rf scripts/* ${CLFS_SCRIPTS}
chmod +x ${CLFS_SCRIPTS}/*


${CLFS_SCRIPTS}/host-check.sh
echo "Press enter to continue..."
read _


## Creating the CLFS build user
rm -rf /home/clfs
userdel clfs

sudo groupadd clfs
sudo useradd -s /bin/bash -g clfs -m -k /dev/null clfs

chown -Rv clfs ${CLFS}

mkdir -p /home/clfs

cat > /home/clfs/.bash_profile <<'EOF'
exec env -i HOME=${HOME} TERM=${TERM} PS1='\u:\w\$ ' /bin/bash
EOF

cat > /home/clfs/.bashrc <<'EOF'
set +h
umask 022

## Extracts a package source archive, and runs the given callback function.
## $1 : Package definition variable group name (i.e. GCC, LINUX, ZLIB)
## $2 : Processing callback function, run in source directory after unzipping
## $3 : Log file name
EXTRACT () {
    local PKG_VAR_GROUP_NAME=${1}
    local PROCESS_FUNC=${2}
    local PKG_VANITY_NAME=${3:-${PKG_VAR_GROUP_NAME}}

    local PKG_VER=${PKG_VAR_GROUP_NAME}_VER
    local PKG_VER=${!PKG_VER}
    local PKG_DIR=${PKG_VAR_GROUP_NAME}_DIR
    local PKG_DIR=${!PKG_DIR}
    local PKG_ARCHIVE=${PKG_VAR_GROUP_NAME}_ARCHIVE
    local PKG_ARCHIVE=${!PKG_ARCHIVE}

    echo "Extracting package ${PKG_VANITY_NAME} (ver. ${PKG_VER}) source: '${PKG_ARCHIVE}' -> '${PKG_DIR}'"
    pushd ${CLFS_SOURCES} > /dev/null

    local STDOUT_LOG="${PKG_VANITY_NAME}.stdout.log"
    local STDERR_LOG="${PKG_VANITY_NAME}.stderr.log"

    echo "    stdout will be logged to '${STDOUT_LOG}'; stderr will be logged to '${STDERR_LOG}'"

    local TMP_OUT="${TMPDIR:-/tmp}/out.$$" TMP_ERR="${TMPDIR:-/tmp}/err.$$"
    mkfifo "${TMP_OUT}" "${TMP_ERR}"

    tar xf ${PKG_ARCHIVE} && cd ${PKG_DIR} && \
    $PROCESS_FUNC >"${TMP_OUT}" 2>"${TMP_ERR}" & \
    tee "${CLFS_LOGS}/${STDOUT_LOG}" < "${TMP_OUT}" & \
    tee "${CLFS_LOGS}/${STDERR_LOG}" < "${TMP_ERR}" && \
    echo "Successfully extracted and processed package ${PKG_VANITY_NAME}!" || \
    echo "Failed to extract or process package ${PKG_VANITY_NAME}!"

    cd ${CLFS_SOURCES}
    rm -rf ${PKG_DIR}

    rm "${TMP_OUT}" "${TMP_ERR}" > /dev/null
    popd > /dev/null
}

EOF

cat >> /home/clfs/.bashrc <<EOF
export CLFS=${CLFS}
export CLFS_BUILD=${CLFS_BUILD}
export CLFS_CONFIGS=${CLFS_CONFIGS}
export CLFS_LOGS=${CLFS_LOGS}
export CLFS_SCRIPTS=${CLFS_SCRIPTS}
export CLFS_SOURCES=${CLFS_SOURCES}
export CLFS_ROOT=${CLFS_ROOT}
export CLFS_SYSROOT=${CLFS_SYSROOT}
export CLFS_BOOT_ROOT=${CLFS_BOOT_ROOT}
export CLFS_CROSS_ROOT=${CLFS_CROSS_ROOT}

EOF

cat >> /home/clfs/.bashrc <<'EOF'
export CLFS_HOSTNAME="raspi"
export CLFS_HOST="$(echo ${MACHTYPE} | sed "s/-[^-]*/-cross/")"
export CLFS_TARGET="arm-linux-musleabihf"
export CLFS_ARCH="arm"
export CLFS_ARCH_DTS_LIST=("bcm2837-rpi-3-b.dtb")
export CLFS_GCC_ARCH="armv8-a+crc+crypto"
export CLFS_GCC_ARCH_HAS_FLOAT_AND_FPU=true
export CLFS_GCC_FLOAT="hard"
export CLFS_GCC_FPU="crypto-neon-fp-armv8"
export CLFS_GCC_TUNE="cortex-a53"

if [ "${CLFS_GCC_ARCH_HAS_FLOAT_AND_FPU}" = true ]; then
export CLFS_GCC_FLOAT_OPT="--with-float=${CLFS_GCC_FLOAT}"
export CLFS_GCC_FPU_OPT="--with-fpu=${CLFS_GCC_FPU}"
fi

export CLFS_CROSS_SYSROOT=${CLFS_CROSS_ROOT}/${CLFS_TARGET}

MAKEFLAGS="-j$(nproc --all)"
LC_ALL=POSIX
PATH=${CLFS_CROSS_ROOT}/bin:/bin:/usr/bin
export MAKEFLAGS LC_ALL PATH
unset CFLAGS
EOF

chown -Rf clfs /home/clfs


su - clfs <<'CLFS_USER_EOF'

source ~/.bashrc


################################################################################
### II) Setting package version variables ######################################
################################################################################
## Defines a package
## $1 : The name of the package variable group (e.g. MUSL, LINUX, GCC)
## $2 : The package source version
## $3 : The package source archive compression (e.g. gz, bz2, xz)
## $4 : The package source directory prefix
## $5 : The package source archive prefix. Overrides the PKG_DIR_PREFIX if defined
DEFINE () {
    local PKG_NAME=$1
    local PKG_VER=$2
    local PKG_COMPRESSION=$3
    local PKG_DIR_PREFIX=$4
    local PKG_ARCHIVE_PREFIX=$5

    local PKG_VER_SUBSTR=${PKG_VER:+'-'}${PKG_VER}
    local PKG_DIR=${PKG_DIR_PREFIX}${PKG_VER_SUBSTR}
    local PKG_ARCHIVE=${PKG_ARCHIVE_PREFIX:-${PKG_DIR_PREFIX}}${PKG_VER_SUBSTR}.tar.${PKG_COMPRESSION}

    [ -n "${PKG_VER}" ] && printf -v ${PKG_NAME}_VER ${PKG_VER}
    printf -v ${PKG_NAME}_DIR ${PKG_DIR}
    printf -v ${PKG_NAME}_ARCHIVE ${PKG_ARCHIVE}

    export "${PKG_NAME}_VER" "${PKG_NAME}_DIR" "${PKG_NAME}_ARCHIVE"
}

###### "VAR_GROUP_NAME" "VERSION"   "COMPRESSION"   "DIR_PREFIX"                    "ARCHIVE_PREFIX"
####################################################################################################
DEFINE "BINUTILS"       "2.35"      "xz"            "binutils"                      ""
DEFINE "BOOTSCRIPTS"    ""          "gz"            "bootscripts-embedded-master"   "master"
DEFINE "BUSYBOX"        "1.32.0"    "bz2"           "busybox"                       ""
DEFINE "DROPBEAR"       "2020.80"   "bz2"           "dropbear"                      ""
DEFINE "GCC"            "10.2.0"    "xz"            "gcc"                           ""
DEFINE "GMP"            "6.2.0"     "xz"            "gmp"                           ""
DEFINE "IANA_ETC"       "20200910"  "gz"            "iana-etc"                      ""
DEFINE "LINUX"          "5.8.9"     "xz"            "linux"                         ""
DEFINE "MPC"            "1.2.0"     "gz"            "mpc"                           ""
DEFINE "MPFR"           "4.1.0"     "xz"            "mpfr"                          ""
DEFINE "MUSL"           "1.2.1"     "gz"            "musl"                          ""
DEFINE "NETPLUG"        "1.2.9.2"   "bz2"           "netplug"                       ""
DEFINE "UBOOT"          "2020.07"   "bz2"           "u-boot"                        ""
DEFINE "ZLIB"           "1.2.11"    "xz"            "zlib"                          ""


################################################################################
### III) Preparation for the build #############################################
################################################################################
## Creating a FSH-compliant directory structure in CLFS_ROOT
mkdir -pv ${CLFS_ROOT}/{bin,boot,dev,etc,home,lib,media,mnt,opt,proc,root,run,sbin,srv,tmp}

mkdir -pv ${CLFS_ROOT}/etc/{opt,}
mkdir -pv ${CLFS_ROOT}/lib/{modules,}
mkdir -pv ${CLFS_ROOT}/usr/{bin,include,lib,libexec,sbin,share,src}
mkdir -pv ${CLFS_ROOT}/usr/local/{bin,etc,games,include,lib,man,sbin,share,src}
mkdir -pv ${CLFS_ROOT}/usr/share/{man,misc}
mkdir -pv ${CLFS_ROOT}/var/{cache,lib,local,lock,log,mail,opt,spool,tmp}

ln -fsv ../proc/mounts ${CLFS_ROOT}/etc/mtab
ln -fsv ../run ${CLFS_ROOT}/var/run
ln -fsv ../mail ${CLFS_ROOT}/var/spool/mail

chmod 0750 ${CLFS_ROOT}/root
chmod 1777 ${CLFS_ROOT}/{var/,}tmp


## Ensuring that ${CLFS_SYSROOT}, ${CLFS_BOOT_ROOT}, and ${CLFS_CROSS_(SYS)ROOT} exist
mkdir -pv ${CLFS_SYSROOT} ${CLFS_BOOT_ROOT} ${CLFS_CROSS_SYSROOT}
#### this allows us to treat ${CLFS_CROSS_SYSROOT} and ${CLFS_CROSS_SYSROOT}/usr identically
ln -fsv . ${CLFS_CROSS_SYSROOT}/usr


## Creating the group,passwd, and lastlog files
cat > ${CLFS_ROOT}/etc/group << "EOF"
root:x:0:
bin:x:1:
sys:x:2:
kmem:x:3:
tty:x:4:
tape:x:5:
daemon:x:6:
floppy:x:7:
disk:x:8:
lp:x:9:
dialout:x:10:
audio:x:11:
video:x:12:
utmp:x:13:
usb:x:14:
cdrom:x:15:
EOF

cat > ${CLFS_ROOT}/etc/passwd << "EOF"
root::0:0:root:/root:/bin/ash
EOF

touch ${CLFS_ROOT}/var/log/lastlog
chmod -v 664 ${CLFS_ROOT}/var/log/lastlog


cd ${CLFS_SOURCES}


################################################################################
### IV) Building the cross-compilation toolchain ###############################
################################################################################
## Binutils - Pass 1
BINUTILS_PASS1 () {
    mkdir -v binutils-build
    cd binutils-build

    ../configure \
        --prefix=${CLFS_CROSS_ROOT} \
        --with-sysroot=${CLFS_CROSS_SYSROOT} \
        --build=${CLFS_HOST} \
        --host=${CLFS_HOST} \
        --target=${CLFS_TARGET} \
        --disable-nls \
        --disable-shared \
        --disable-multilib \
        --disable-werror
    
    make && make install
}
EXTRACT "BINUTILS" BINUTILS_PASS1 "toolchain-binutils-pass1-install"


## GCC - Pass 1
GCC_PASS1 () {
    tar xf ../${MPFR_ARCHIVE}
    mv -v ${MPFR_DIR} mpfr
    tar xf ../${GMP_ARCHIVE}
    mv -v ${GMP_DIR} gmp
    tar xf ../${MPC_ARCHIVE}
    mv -v ${MPC_DIR} mpc

    mkdir -v gcc-build
    cd gcc-build

    ../configure \
        --prefix=${CLFS_CROSS_ROOT} \
        --with-sysroot=${CLFS_CROSS_SYSROOT} \
        --build=${CLFS_HOST} \
        --host=${CLFS_HOST} \
        --target=${CLFS_TARGET} \
        --with-newlib \
        --without-headers \
        --enable-initfini-array \
        --disable-nls \
        --disable-shared \
        --disable-multilib \
        --disable-decimal-float \
        --disable-threads \
        --disable-libatomic \
        --disable-libgomp \
        --disable-libquadmath \
        --disable-libsanitizer \
        --disable-libssp \
        --disable-libvtv \
        --disable-libstdcxx \
        --enable-languages=c,c++ \
        --with-arch=${CLFS_ARM_ARCH} \
        --with-tune=${CLFS_GCC_TUNE} \
        ${CLFS_GCC_FLOAT_OPT} ${CLFS_GCC_FPU_OPT}

    make all-gcc all-target-libgcc && make install-gcc install-target-libgcc

    cd ..
    cat gcc/limitx.h gcc/glimits.h gcc/limity.h > \
        `dirname $(${CLFS_TARGET}-gcc -print-libgcc-file-name)`/install-tools/include/limits.h
}
EXTRACT "GCC" GCC_PASS1 "toolchain-gcc-pass1-install"


## Linux API Headers
LINUX () {
    make mrproper
    
    make ARCH=${CLFS_ARCH} headers_check
    make ARCH=${CLFS_ARCH} headers
    
    find usr/include -name '.*' -delete
    rm usr/include/Makefile
    cp -r usr/include ${CLFS_CROSS_SYSROOT}
}
EXTRACT "LINUX" LINUX "toolchain-linux-headers-install"


## Musl libc
MUSL () {
    ./configure \
        CROSS_COMPILE=${CLFS_TARGET}- \
        --prefix=/ \
        --build=${CLFS_HOST} \
        --host=${CLFS_HOST} \
        --target=${CLFS_TARGET}

    make && make DESTDIR=${CLFS_CROSS_SYSROOT} install

    ${CLFS_CROSS_ROOT}/libexec/gcc/${CLFS_TARGET}/${GCC_VER}/install-tools/mkheaders
}
EXTRACT "MUSL" MUSL "toolchain-libc-install"


## Libstdc++ - Pass 1
LIBSTDCXX_PASS1 () {
    mkdir -v libstdcxx-build
    cd libstdcxx-build

    ../libstdc++-v3/configure \
        --prefix=/ \
        --build=${CLFS_HOST} \
        --host=${CLFS_HOST} \
        --target=${CLFS_TARGET} \
        --disable-nls \
        --disable-multilib \
        --disable-libstdcxx-pch \
        --with-gxx-include-dir=${CLFS_CROSS_SYSROOT}/include/c++/${GCC_VER}

    make && make DESTDIR=${CLFS_CROSS_SYSROOT} install
}
EXTRACT "GCC" LIBSTDCXX_PASS1 "toolchain-libstdc++-pass1-install"


## Binutils - Pass 2
BINUTILS_PASS2 () {
    mkdir -v binutils-build
    cd binutils-build

    ../configure \
        --prefix=${CLFS_CROSS_ROOT} \
        --with-sysroot=${CLFS_SYSROOT} \
        --with-build-sysroot=${CLFS_CROSS_SYSROOT} \
        --build=${CLFS_HOST} \
        --host=${CLFS_HOST} \
        --target=${CLFS_TARGET} \
        --disable-nls \
        --enable-shared \
        --disable-multilib \
        --disable-werror
    
    make && make install
}
EXTRACT "BINUTILS" BINUTILS_PASS2 "toolchain-binutils-pass2-install"


## GCC - Pass 2
GCC_PASS2 () {
    tar xf ../${MPFR_ARCHIVE}
    mv -v ${MPFR_DIR} mpfr
    tar xf ../${GMP_ARCHIVE}
    mv -v ${GMP_DIR} gmp
    tar xf ../${MPC_ARCHIVE}
    mv -v ${MPC_DIR} mpc

    mkdir -v gcc-build
    cd gcc-build

    mkdir -pv ${CLFS_TARGET}/libgcc
    ln -s ../../../libgcc/gthr-posix.h ${CLFS_TARGET}/libgcc/gthr-default.h

    ../configure \
        --prefix=${CLFS_CROSS_ROOT} \
        --with-sysroot=${CLFS_SYSROOT} \
        --with-build-sysroot=${CLFS_CROSS_SYSROOT} \
        --build=${CLFS_HOST} \
        --host=${CLFS_HOST} \
        CC_FOR_TARGET=${CLFS_TARGET}-gcc \
        --target=${CLFS_TARGET} \
        --enable-initfini-array \
        --disable-nls \
        --disable-multilib \
        --disable-libsanitizer \
        --disable-libstdcxx \
        --enable-languages=c,c++ \
        --with-arch=${CLFS_ARM_ARCH} \
        --with-tune=${CLFS_GCC_TUNE} \
        ${CLFS_GCC_FLOAT_OPT} ${CLFS_GCC_FPU_OPT}

    make && make install
}
EXTRACT "GCC" GCC_PASS2 "toolchain-gcc-pass2-install"


## Libstdc++ - Pass 2
LIBSTDCXX_PASS2 () {
    ln -s gthr-posix.h libgcc/gthr-default.h

    mkdir -v libstdcxx-build
    cd libstdcxx-build

    ../libstdc++-v3/configure \
        CXXFLAGS="-g -O2 -D_GNU_SOURCE" \
        --prefix=/ \
        --build=${CLFS_HOST} \
        --host=${CLFS_HOST} \
        --target=${CLFS_TARGET} \
        --disable-nls \
        --disable-multilib \
        --disable-libstdcxx-pch

    make && make DESTDIR=${CLFS_CROSS_SYSROOT} install
}
EXTRACT "GCC" LIBSTDCXX_PASS2 "toolchain-libstdc++-pass2-install"


## Setting toolchain variables
echo export CC=\""${CLFS_TARGET}-gcc\"" >> ~/.bashrc
echo export CXX=\""${CLFS_TARGET}-g++\"" >> ~/.bashrc
echo export AR=\""${CLFS_TARGET}-ar\"" >> ~/.bashrc
echo export AS=\""${CLFS_TARGET}-as\"" >> ~/.bashrc
echo export LD=\""${CLFS_TARGET}-ld\"" >> ~/.bashrc
echo export RANLIB=\""${CLFS_TARGET}-ranlib\"" >> ~/.bashrc
echo export READELF=\""${CLFS_TARGET}-readelf\"" >> ~/.bashrc
echo export STRIP=\""${CLFS_TARGET}-strip\"" >> ~/.bashrc


source ~/.bashrc


################################################################################
### V) Building and installing basic system packages ###########################
################################################################################
## Creating passwd, group, and lastlog files
ln -svf ../proc/mounts ${CLFS_ROOT}/etc/mtab

cat > ${CLFS_ROOT}/etc/passwd <<'EOF'
root::0:0:root:/root:/bin/ash
EOF

cat > ${CLFS_ROOT}/etc/group <<'EOF'
root:x:0:
bin:x:1:
sys:x:2:
kmem:x:3:
tty:x:4:
tape:x:5:
daemon:x:6:
floppy:x:7:
disk:x:8:
lp:x:9:
dialout:x:10:
audio:x:11:
video:x:12:
utmp:x:13:
usb:x:14:
cdrom:x:15:
EOF

touch ${CLFS_ROOT}/var/log/lastlog
chmod -v 664 ${CLFS_ROOT}/var/log/lastlog

## Installing libgcc
cp -v ${CLFS_CROSS_SYSROOT}/lib/libgcc_s.so{.1,} ${CLFS_ROOT}/lib/
${CLFS_TARGET}-strip ${CLFS_ROOT}/lib/libgcc_s.so{.1,}


## Linux API Headers
LINUX () {
    make mrproper
    
    make ARCH=${CLFS_ARCH} headers_check
    make ARCH=${CLFS_ARCH} headers
    
    find usr/include -name '.*' -delete
    rm usr/include/Makefile
    cp -r usr/include ${CLFS_SYSROOT}/usr
}
EXTRACT "LINUX" LINUX "core-pkg-linux-headers-install"


## Musl libc
MUSL () {
    ./configure \
        CROSS_COMPILE=${CLFS_TARGET}- \
        --prefix=/usr \
        --build=${CLFS_HOST} \
        --host=${CLFS_TARGET} \
        --target=${CLFS_TARGET}

    make && make DESTDIR=${CLFS_SYSROOT} install
}
EXTRACT "MUSL" MUSL "core-pkg-iana-etc-install"


## Libstdc++
LIBSTDCXX () {
    ln -s gthr-posix.h libgcc/gthr-default.h

    mkdir -v libstdcxx-build
    cd libstdcxx-build

    ../libstdc++-v3/configure \
        CXXFLAGS="-g -O2 -D_GNU_SOURCE" \
        --prefix=/usr \
        --build=${CLFS_HOST} \
        --host=${CLFS_TARGET} \
        --target=${CLFS_TARGET} \
        --disable-nls \
        --disable-multilib

    make && make DESTDIR=${CLFS_SYSROOT} install
}
EXTRACT "GCC" LIBSTDCXX "core-pkg-libstdc++-install"


## Installing busybox
BUSYBOX () {
    make distclean

    make ARCH="${CLFS_ARCH}" defconfig

    sed -i 's/\(CONFIG_\)\(.*\)\(INETD\)\(.*\)=y/# \1\2\3\4 is not set/g' .config
    sed -i 's/\(CONFIG_IFPLUGD\)=y/# \1 is not set/' .config

    sed -i 's/\(CONFIG_FEATURE_WTMP\)=y/# \1 is not set/' .config
    sed -i 's/\(CONFIG_FEATURE_UTMP\)=y/# \1 is not set/' .config

    sed -i 's/\(CONFIG_UDPSVD\)=y/# \1 is not set/' .config
    sed -i 's/\(CONFIG_TCPSVD\)=y/# \1 is not set/' .config

    make ARCH="${CLFS_ARCH}" CROSS_COMPILE="${CLFS_TARGET}-" && \
    make ARCH="${CLFS_ARCH}" CROSS_COMPILE="${CLFS_TARGET}-" CONFIG_PREFIX="${CLFS_ROOT}" install

    #### For building the linux kernel with modules
    cp -v examples/depmod.pl ${CLFS_CROSS_ROOT}/bin
    chmod -v 755 ${CLFS_CROSS_ROOT}/bin/depmod.pl
}
EXTRACT "BUSYBOX" BUSYBOX "core-pkg-busybox-install"


## Installing iana-etc
IANA_ETC () {
    cp protocols services ${CLFS_ROOT}/etc
}
EXTRACT "IANA_ETC" IANA_ETC "core-pkg-iana-etc-install"


## Zlib
ZLIB () {
    ./configure \
        --prefix=/usr \
        --const \
        --shared
    
    make && make DESTDIR=${CLFS_SYSROOT} install
}
EXTRACT "ZLIB" ZLIB "core-pkg-zlib-install"


### Making the system bootable
## /etc/fstab file
cat > ${CLFS_ROOT}/etc/fstab <<'EOF'
# file-system  mount-point  type   options          dump  fsck
EOF


## Linux kernel
LINUX () {
    make mrproper

    cp ${CLFS_CONFIGS}/linux-kernel-config .config

    make ARCH=${CLFS_ARCH} CROSS_COMPILE=${CLFS_TARGET}- && \
    make ARCH=${CLFS_ARCH} CROSS_COMPILE=${CLFS_TARGET}- INSTALL_MOD_PATH=${CLFS_ROOT} modules_install

    cp arch/${CLFS_ARCH}/boot/zImage ${CLFS_BOOT_ROOT}
    for DTS in ${CLFS_ARCH_DTS_LIST[@]}
    do
        cp arch/${CLFS_ARCH}/boot/dts/$DTS ${CLFS_BOOT_ROOT}
    done
}
EXTRACT "LINUX" LINUX "linux-kernel-build"


## Das U-Boot
UBOOT () {
    make distclean

    cp ${CLFS_CONFIGS}/uboot-config .config

    make ARCH=${CLFS_ARCH} CROSS_COMPILE=${CLFS_TARGET}-

    cp u-boot.bin ${CLFS_BOOT_ROOT}
}
EXTRACT "UBOOT" UBOOT "uboot-bootloader-build"


## Bootscripts
BOOTSCRIPTS () {
    make DESTDIR=${CLFS_ROOT} install-bootscripts
    make DESTDIR=${CLFS_ROOT} install-dropbear
    make DESTDIR=${CLFS_ROOT} install-netplug
}
EXTRACT "BOOTSCRIPTS" BOOTSCRIPTS "core-pkg-bootscripts-install"


## Configuring mdev
cat > ${CLFS_ROOT}/etc/mdev.conf<<'EOF'
# /etc/mdev/conf

# Devices:
# Syntax: %s %d:%d %s
# devices user:group mode

# null does already exist; therefore ownership has to be changed with command
null    root:root 0666  @chmod 666 $MDEV
zero    root:root 0666
grsec   root:root 0660
full    root:root 0666

random  root:root 0666
urandom root:root 0444
hwrandom root:root 0660

# console does already exist; therefore ownership has to be changed with command
#console        root:tty 0600   @chmod 600 $MDEV && mkdir -p vc && ln -sf ../$MDEV vc/0
console root:tty 0600 @mkdir -pm 755 fd && cd fd && for x in 0 1 2 3 ; do ln -sf /proc/self/fd/$x $x; done

fd0     root:floppy 0660
kmem    root:root 0640
mem     root:root 0640
port    root:root 0640
ptmx    root:tty 0666

# ram.*
ram([0-9]*)     root:disk 0660 >rd/%1
loop([0-9]+)    root:disk 0660 >loop/%1
sd[a-z].*       root:disk 0660 */lib/mdev/usbdisk_link
hd[a-z][0-9]*   root:disk 0660 */lib/mdev/ide_links
md[0-9]         root:disk 0660

tty             root:tty 0666
tty[0-9]        root:root 0600
tty[0-9][0-9]   root:tty 0660
ttyS[0-9]*      root:tty 0660
pty.*           root:tty 0660
vcs[0-9]*       root:tty 0660
vcsa[0-9]*      root:tty 0660

ttyLTM[0-9]     root:dialout 0660 @ln -sf $MDEV modem
ttySHSF[0-9]    root:dialout 0660 @ln -sf $MDEV modem
slamr           root:dialout 0660 @ln -sf $MDEV slamr0
slusb           root:dialout 0660 @ln -sf $MDEV slusb0
fuse            root:root  0666

# dri device
card[0-9]       root:video 0660 =dri/

# alsa sound devices and audio stuff
pcm.*           root:audio 0660 =snd/
control.*       root:audio 0660 =snd/
midi.*          root:audio 0660 =snd/
seq             root:audio 0660 =snd/
timer           root:audio 0660 =snd/

adsp            root:audio 0660 >sound/
audio           root:audio 0660 >sound/
dsp             root:audio 0660 >sound/
mixer           root:audio 0660 >sound/
sequencer.*     root:audio 0660 >sound/

# misc stuff
agpgart         root:root 0660  >misc/
psaux           root:root 0660  >misc/
rtc             root:root 0664  >misc/

# input stuff
event[0-9]+     root:root 0640 =input/
mice            root:root 0640 =input/
mouse[0-9]      root:root 0640 =input/
ts[0-9]         root:root 0600 =input/

# v4l stuff
vbi[0-9]        root:video 0660 >v4l/
video[0-9]      root:video 0660 >v4l/

# dvb stuff
dvb.*           root:video 0660 */lib/mdev/dvbdev

# load drivers for usb devices
usbdev[0-9].[0-9]       root:root 0660 */lib/mdev/usbdev
usbdev[0-9].[0-9]_.*    root:root 0660

# net devices
tun[0-9]*       root:root 0600 =net/
tap[0-9]*       root:root 0600 =net/

# zaptel devices
zap(.*)         root:dialout 0660 =zap/%1
dahdi!(.*)      root:dialout 0660 =dahdi/%1

# raid controllers
cciss!(.*)      root:disk 0660 =cciss/%1
ida!(.*)        root:disk 0660 =ida/%1
rd!(.*)         root:disk 0660 =rd/%1

sr[0-9]         root:cdrom 0660 @ln -sf $MDEV cdrom 

# hpilo
hpilo!(.*)      root:root 0660 =hpilo/%1

# xen stuff
xvd[a-z]        root:root 0660 */lib/mdev/xvd_links
EOF

## Creating /etc/profile
cat > ${CLFS_ROOT}/etc/profile <<'EOF'
# /etc/profile

# Set the initial path
export PATH=/bin:/usr/bin

if [ `id -u` -eq 0 ] ; then
PATH=/bin:/sbin:/usr/bin:/usr/sbin
unset HISTFILE
fi

# Setup some environment variables.
export USER=`id -un`
export LOGNAME=$USER
export HOSTNAME=`/bin/hostname`
export HISTSIZE=1000
export HISTFILESIZE=1000
export PAGER='/bin/more '
export EDITOR='/bin/vi'

# End /etc/profile
EOF

## Creating /etc/inittab
cat > ${CLFS_ROOT}/etc/inittab <<'EOF'
# /etc/inittab

::sysinit:/etc/rc.d/startup

tty1::respawn:/sbin/getty 38400 tty1
tty2::respawn:/sbin/getty 38400 tty2
tty3::respawn:/sbin/getty 38400 tty3
tty4::respawn:/sbin/getty 38400 tty4
tty5::respawn:/sbin/getty 38400 tty5
tty6::respawn:/sbin/getty 38400 tty6

# Put a getty on the serial line (for a terminal).  Uncomment this line if
# you're using a serial console on ttyS0, or uncomment and adjust it if using a
# serial console on a different serial port.
#::respawn:/sbin/getty -L ttyS0 115200 vt100

::shutdown:/etc/rc.d/shutdown
::ctrlaltdel:/sbin/reboot
EOF

## Setting hostname
echo ${CLFS_HOSTNAME} > ${CLFS_ROOT}/etc/HOSTNAME

## Customising /etc/hosts
cat > ${CLFS_ROOT}/etc/hosts <<'EOF'
# Begin /etc/hosts (no network card version)

127.0.0.1 localhost

# End /etc/hosts (no network card version)
EOF

## Configuring the network script
mkdir -pv ${CLFS_ROOT}/etc/network/if-{post-{up,down},pre-{up,down},up,down}.d
mkdir -pv ${CLFS_ROOT}/usr/share/udhcpc

cat > ${CLFS_ROOT}/etc/network/interfaces <<'EOF'
auto eth0
iface eth0 inet dhcp
EOF

cat > ${CLFS_ROOT}/usr/share/udhcpc/default.script <<'EOF'
#!/bin/sh
# udhcpc Interface Configuration
# Based on http://lists.debian.org/debian-boot/2002/11/msg00500.html
# udhcpc script edited by Tim Riker <Tim@Rikers.org>

[ -z "$1" ] && echo "Error: should be called from udhcpc" && exit 1

RESOLV_CONF="/etc/resolv.conf"
[ -n "$broadcast" ] && BROADCAST="broadcast $broadcast"
[ -n "$subnet" ] && NETMASK="netmask $subnet"

case "$1" in
deconfig)
/sbin/ifconfig $interface 0.0.0.0
;;

renew|bound)
/sbin/ifconfig $interface $ip $BROADCAST $NETMASK

if [ -n "$router" ] ; then
while route del default gw 0.0.0.0 dev $interface ; do
true
done

for i in $router ; do
route add default gw $i dev $interface
done
fi

echo -n > $RESOLV_CONF
[ -n "$domain" ] && echo search $domain >> $RESOLV_CONF
for i in $dns ; do
echo nameserver $i >> $RESOLV_CONF
done
;;
esac

exit 0
EOF

chmod +x ${CLFS_ROOT}/usr/share/udhcpc/default.script


source ~/.bashrc


################################################################################
### VI) Building and installing additional system packages #####################
################################################################################
## Netplug
NETPLUG () {
    patch -Np1 -i ../netplug-1.2.9.2-fixes-1.patch

    make && make DESTDIR=${CLFS_ROOT} install
}
EXTRACT "NETPLUG" NETPLUG "extra-pkg-netplug-install"


## Dropbear
DROPBEAR () {
    cp ${CLFS_CONFIGS}/dropbear_config.h localoptions.h

    ./configure \
        --prefix=/usr \
        --build=${CLFS_HOST} \
        --host=${CLFS_TARGET}

    make MULTI=1 PROGRAMS="dropbear dbclient dropbearkey dropbearconvert scp" && \
    make MULTI=1 PROGRAMS="dropbear dbclient dropbearkey dropbearconvert scp" DESTDIR=${CLFS_ROOT} install

    install -dv ${CLFS_ROOT}/etc/dropbear
}
EXTRACT "DROPBEAR" DROPBEAR "extra-pkg-dropbear-install"

source ~/.bashrc


CLFS_USER_EOF

################################################################################
### VII) Cleanup and packaging of finished system ##############################
################################################################################
chown -Rv root:root ${CLFS_ROOT}
chgrp -v 13 ${CLFS_ROOT}/var/log/lastlog

cd ${CLFS_ROOT}
tar cfjv ${CLFS_BUILD}/clfs-rootfs.tar.xz *
echo "Packaged CLFS rootfs: use \'tar -fpx ${CLFS_BUILD}/clfs-rootfs.tar.xz -C targetdir\' to unpack into a target directory"

cd ${CLFS_BOOT_ROOT}
tar cfjv ${CLFS_BUILD}/clfs-bootfs.tar.xz *
echo "Packaged CLFS bootfs: use \'tar -fpx ${CLFS_BUILD}/clfs-bootfs.tar.xz -C targetdir\' to unpack into a target directory"

echo "Finished and packaged CLFS system!"
