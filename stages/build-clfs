#!/bin/bash


CONFIRM () {
	read -p "Press enter to continue..." _
}


echo "Please run this script as the root user!"
CONFIRM


################################################################################
### 0) Parameters ##############################################################
################################################################################
export CLFS_HOSTNAME="raspi"

# arm
export CLFS_TARGET="arm-linux-musleabihf"
export CLFS_ARCH="arm"
export CLFS_DTS_LIST=("bcm2836-rpi-2-b.dtb" "bcm2837-rpi-3-b.dtb")
export CLFS_KERNEL="zImage"
export CLFS_GCC_ARCH="armv8-a+crc+crypto"
export CLFS_GCC_OPTS="--with-tune=cortex-a53 --with-float=hard --with-fpu=crypto-neon-fp-armv8"

# aarch64
#export CLFS_TARGET="aarch64-linux-musl"
#export CLFS_ARCH="arm64"
#export CLFS_DTS_LIST=("broadcom/bcm2837-rpi-3-b.dtb")
#export CLFS_KERNEL="Image"
#export CLFS_GCC_ARCH="armv8-a"
#export CLFS_GCC_OPTS=""


export CLFS_CFLAGS="-Os -pipe"
export CLFS_CXXFLAGS="-Os -pipe"
export CLFS_MAKEFLAGS="-j$(nproc)"


################################################################################
### I) Preparation for the build ###############################################
################################################################################
export CLFS=/mnt/clfs
export CLFS_BOOTSCRIPTS=${CLFS}/bootscripts
export CLFS_CONFIGS=${CLFS}/configs
export CLFS_LOGS=${CLFS}/logs
export CLFS_SCRIPTS=${CLFS}/scripts
export CLFS_SOURCES=${CLFS}/sources
export CLFS_ROOT=${CLFS}/rootfs
export CLFS_BOOT_ROOT=${CLFS}/bootfs
export CLFS_CROSS_ROOT=${CLFS}/crossfs
export CLFS_CROSS_SYSROOT=${CLFS_CROSS_ROOT}  # temporary assignment


mkdir -pv ${CLFS}
rm -rf ${CLFS_ROOT} ${CLFS_BOOT_ROOT}
chmod 777 ${CLFS}

mkdir -pv ${CLFS_BOOTSCRIPTS} ${CLFS_CONFIGS} ${CLFS_LOGS} ${CLFS_SCRIPTS} ${CLFS_SOURCES}
chmod -v a+wt ${CLFS_BOOTSCRIPTS} ${CLFS_CONFIGS} ${CLFS_LOGS} ${CLFS_SCRIPTS} ${CLFS_SOURCES}


FETCH_PKGS () {
	rm -rf ${CLFS_SOURCES}/{md5sums,wget-list}

	cp wget-list.src ${CLFS_SOURCES}/wget-list
	cp md5sums.src ${CLFS_SOURCES}/md5sums

	pushd ${CLFS_SOURCES} > /dev/null
		wget --input-file=wget-list --continue
		md5sum -c md5sums
	popd > /dev/null
}
#FETCH_PKGS


## Copying over scripts and additional config files
rm -rf ${CLFS_BOOTSCRIPTS}/* ${CLFS_CONFIGS}/* ${CLFS_SCRIPTS}/*
cp -rf bootscripts/* ${CLFS_BOOTSCRIPTS}
cp -rf configs/* ${CLFS_CONFIGS}
cp -rf scripts/* ${CLFS_SCRIPTS}
chmod +x ${CLFS_SCRIPTS}/*


${CLFS_SCRIPTS}/host-check.sh
CONFIRM


## Creating the CLFS build user
rm -rf /home/clfs
userdel clfs

groupadd clfs
useradd -s /bin/bash -g clfs -m -k /dev/null clfs

chown -Rv clfs:clfs ${CLFS}

mkdir -p /home/clfs

cat > /home/clfs/.bash_profile <<'EOF'
exec env -i HOME=${HOME} TERM=${TERM} PS1='\u:\w\$ ' /bin/bash
EOF

cat > /home/clfs/.bashrc <<'EOF'
set +h
umask 022

## Extracts a package source archive, and runs the given callback function.
## $1 : Package definition variable group name (i.e. GCC, LINUX, ZLIB)
## $2 : Processing callback function, run in source directory after unzipping
## $3 : Vanity package name
EXTRACT () {
	local PKG_VAR_GROUP_NAME=$1
	local PROCESS_FUNC=$2
	local PKG_VANITY_NAME=${3:-${PKG_VAR_GROUP_NAME}}

	local PKG_VER=${PKG_VAR_GROUP_NAME}_VER
	local PKG_VER=${!PKG_VER}
	local PKG_DIR=${PKG_VAR_GROUP_NAME}_DIR
	local PKG_DIR=${!PKG_DIR}
	local PKG_ARCHIVE=${PKG_VAR_GROUP_NAME}_ARCHIVE
	local PKG_ARCHIVE=${!PKG_ARCHIVE}

	echo "Extracting package ${PKG_VANITY_NAME} (ver. ${PKG_VER}) source: '${PKG_ARCHIVE}' -> '${PKG_DIR}'"
	local OLD=$(pwd)
	cd ${CLFS_SOURCES}

	local STDOUT_LOG="${PKG_VANITY_NAME}.stdout.log"
	local STDERR_LOG="${PKG_VANITY_NAME}.stderr.log"

	echo "  stdout will be logged to '${STDOUT_LOG}'; stderr will be logged to '${STDERR_LOG}'"

	local TMP_OUT="${TMPDIR:-/tmp}/out.$$"
	local TMP_ERR="${TMPDIR:-/tmp}/err.$$"
	mkfifo "${TMP_OUT}" "${TMP_ERR}"

	tar xf ${PKG_ARCHIVE} && cd ${PKG_DIR} && \
	$PROCESS_FUNC >"${TMP_OUT}" 2>"${TMP_ERR}" & \
	tee "${CLFS_LOGS}/${STDOUT_LOG}" < "${TMP_OUT}" & \
	tee "${CLFS_LOGS}/${STDERR_LOG}" < "${TMP_ERR}" && \
	echo "Successfully extracted and processed package ${PKG_VANITY_NAME}!" || \
	echo "Failed to extract or process package ${PKG_VANITY_NAME}!"

	cd ${CLFS_SOURCES}
	rm -rf ${PKG_DIR}

	rm "${TMP_OUT}" "${TMP_ERR}" > /dev/null
	cd $OLD
}

EOF

cat >> /home/clfs/.bashrc <<EOF
export CLFS=${CLFS}
export CLFS_BOOTSCRIPTS=${CLFS_BOOTSCRIPTS}
export CLFS_CONFIGS=${CLFS_CONFIGS}
export CLFS_LOGS=${CLFS_LOGS}
export CLFS_SCRIPTS=${CLFS_SCRIPTS}
export CLFS_SOURCES=${CLFS_SOURCES}
export CLFS_ROOT=${CLFS_ROOT}
export CLFS_BOOT_ROOT=${CLFS_BOOT_ROOT}
export CLFS_CROSS_ROOT=${CLFS_CROSS_ROOT}

export CLFS_HOSTNAME="${CLFS_HOSTNAME}"
export CLFS_TARGET="${CLFS_TARGET}"
export CLFS_ARCH="${CLFS_ARCH}"
export CLFS_DTS_LIST=(${CLFS_DTS_LIST[@]})
export CLFS_KERNEL="${CLFS_KERNEL}"
export CLFS_GCC_ARCH="${CLFS_GCC_ARCH}"
export CLFS_GCC_OPTS="${CLFS_GCC_OPTS}"

export CFLAGS="${CLFS_CFLAGS}"
export CXXFLAGS="${CLFS_CXXFLAGS}"
export MAKEFLAGS="${CLFS_MAKEFLAGS}"

EOF

cat >> /home/clfs/.bashrc <<'EOF'
export CLFS_HOST="$(echo ${MACHTYPE} | sed "s/-[^-]*/-cross/")"

export CLFS_CROSS_SYSROOT=${CLFS_CROSS_ROOT}/${CLFS_TARGET}

LC_ALL=POSIX
PATH=${CLFS_CROSS_ROOT}/bin:/bin:/usr/bin
export LC_ALL PATH

EOF

chown -Rf clfs:clfs /home/clfs


su - clfs <<'CLFS_USER_EOF'

source ~/.bashrc


################################################################################
### II) Setting package version variables ######################################
################################################################################
## Defines a package
## $1 : The name of the package variable group (e.g. MUSL, LINUX, GCC)
## $2 : The package source version
## $3 : The package source archive compression (e.g. gz, bz2, xz)
## $4 : The package source archive prefix
## $5 : The package source directory prefix
DEFINE () {
	local PKG_NAME=$1
	local PKG_VER=$2
	local PKG_COMPRESSION=$3
	local PKG_ARCHIVE_PREFIX=$4
	local PKG_DIR_PREFIX=$5

	local PKG_DIR=${PKG_DIR_PREFIX}${PKG_VER}
	local PKG_ARCHIVE=${PKG_ARCHIVE_PREFIX}${PKG_VER}.tar.${PKG_COMPRESSION}

	[ -n "${PKG_VER}" ] && printf -v ${PKG_NAME}_VER ${PKG_VER}
	printf -v ${PKG_NAME}_DIR ${PKG_DIR}
	printf -v ${PKG_NAME}_ARCHIVE ${PKG_ARCHIVE}

	export "${PKG_NAME}_VER" "${PKG_NAME}_DIR" "${PKG_NAME}_ARCHIVE"
}


###### "NAME"		"VERSION"	"COMP"	"ARCHIVE_PREFIX"	"DIRECTORY_PREFIX"
####################################################################################################
DEFINE "BINUTILS"	"2.35.1"	"xz"	"binutils-"		"binutils-"
DEFINE "BUSYBOX"	"1.33.0"	"bz2"	"busybox-"		"busybox-"
DEFINE "DROPBEAR"	"2020.81"	"bz2"	"dropbear-"		"dropbear-"
DEFINE "GCC"		"10.2.0"	"xz"	"gcc-"			"gcc-"
DEFINE "GMP"		"6.2.1"		"xz"	"gmp-"			"gmp-"
DEFINE "IANA_ETC"	"20210106"	"gz"	"iana-etc-"		"iana-etc-"
DEFINE "LIBRESSL"	"3.3.1"		"gz"	"libressl-"		"libressl-"
DEFINE "LINUX"		"5.10.6"	"xz"	"linux-"		"linux-"
DEFINE "MPC"		"1.2.1"		"gz"	"mpc-"			"mpc-"
DEFINE "MPFR"		"4.1.0"		"xz"	"mpfr-"			"mpfr-"
DEFINE "MUSL"		"1.2.2"		"gz"	"musl-"			"musl-"
DEFINE "UBOOT"		"2020.10"	"bz2"	"u-boot-"		"u-boot-"
DEFINE "WIRELESS_TOOLS"	"29"		"gz"	"wireless_tools."	"wireless_tools."
DEFINE "ZLIB"		"1.2.11"	"xz"	"zlib-"			"zlib-"


################################################################################
### III) Preparation for the build #############################################
################################################################################
## Creating a FSH-compliant directory structure in CLFS_ROOT
mkdir -pv ${CLFS_ROOT}/{bin,boot,dev,etc,home,lib,media,mnt,opt,proc,root,run,sbin,srv,sys,tmp}

mkdir -pv ${CLFS_ROOT}/etc/{opt,}
mkdir -pv ${CLFS_ROOT}/lib/{modules,}
mkdir -pv ${CLFS_ROOT}/usr/{bin,include,lib,libexec,sbin,share,src}
mkdir -pv ${CLFS_ROOT}/usr/local/{bin,etc,games,include,lib,man,sbin,share,src}
mkdir -pv ${CLFS_ROOT}/usr/share/{man,misc}
mkdir -pv ${CLFS_ROOT}/var/{cache,lib,local,lock,log,mail,opt,spool,tmp}

ln -fsv ../proc/mounts ${CLFS_ROOT}/etc/mtab
ln -fsv ../run ${CLFS_ROOT}/var/run
ln -fsv ../mail ${CLFS_ROOT}/var/spool/mail

chmod 0750 ${CLFS_ROOT}/root
chmod 1777 ${CLFS_ROOT}/{var/,}tmp


## Ensuring that ${CLFS_ROOT}, ${CLFS_BOOT_ROOT}, and ${CLFS_CROSS_(SYS)ROOT} exist
mkdir -pv ${CLFS_ROOT} ${CLFS_BOOT_ROOT} ${CLFS_CROSS_SYSROOT}
#### this allows us to treat ${CLFS_CROSS_SYSROOT} and ${CLFS_CROSS_SYSROOT}/usr identically
ln -fsv . ${CLFS_CROSS_SYSROOT}/usr


cd ${CLFS_SOURCES}


################################################################################
### IV) Building the cross-compilation toolchain ###############################
################################################################################
${CLFS_SCRIPTS}/build-cross-toolchain.sh

source ~/.bashrc


################################################################################
### V) Building and installing system packages #################################
################################################################################
${CLFS_SCRIPTS}/build-base-packages.sh
${CLFS_SCRIPTS}/build-core-packages.sh
#${CLFS_SCRIPTS}/build-extra-packages.sh

source ~/.bashrc

CLFS_USER_EOF

################################################################################
### VII) Cleanup and packaging of finished system ##############################
################################################################################
chown -R root:root ${CLFS_ROOT} ${CLFS_BOOT_ROOT}
chgrp 13 ${CLFS_ROOT}/var/log/lastlog

BUILD_SUFFIX="$(date +'%Y%m%d')"

cd ${CLFS_ROOT}
tar cfj ${CLFS}/clfs-rootfs-${BUILD_SUFFIX}.tar.xz *
echo "Packaged CLFS rootfs: ${CLFS}/clfs-rootfs-${BUILD_SUFFIX}.tar.xz"
echo "Unpack with 'tar -pxf ${CLFS}/clfs-rootfs-${BUILD_SUFFIX}.tar.xz'"

cd ${CLFS_BOOT_ROOT}
tar cfj ${CLFS}/clfs-bootfs-${BUILD_SUFFIX}.tar.xz *
echo "Packaged CLFS bootfs: ${CLFS}/clfs-bootfs-${BUILD_SUFFIX}.tar.xz"
echo "Unpack with 'tar -pxf ${CLFS}/clfs-bootfs-${BUILD_SUFFIX}.tar.xz'"

chown -R clfs:clfs $CLFS_ROOT $CLFS_BOOT_ROOT

echo "Finished and packaged CLFS system!"

